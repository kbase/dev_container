deploy-dir-service:
	if [ ! -d $(SERVICE_DIR) ] ; then mkdir $(SERVICE_DIR) ; fi
	if [ "$(SERVICE_SUBDIRS)" != "" ] ; then \
		for dir in $(SERVICE_SUBDIRS) ; do \
		    	if [ ! -d $(SERVICE_DIR)/$$dir ] ; then mkdir -p $(SERVICE_DIR)/$$dir ; fi \
		done;  \
	fi

deploy-scripts: deploy-perl-scripts deploy-python-scripts deploy-sh-scripts deploy-perl-scripts-pl deploy-python-scripts-py deploy-sh-scripts-sh deploy-unknown-scripts

deploy-perl-scripts:
	export KB_TOP=$(TARGET); \
	export KB_RUNTIME=$(DEPLOY_RUNTIME); \
	export KB_PERL_PATH=$(TARGET)/lib ; \
	for src in $(SRC_PERL) ; do \
		basefile=`basename $$src`; \
		base=`basename $$src .pl`; \
		echo install $$src $$base ; \
		cp $$src $(TARGET)/plbin ; \
		$(WRAP_PERL_SCRIPT) "$(TARGET)/plbin/$$basefile" $(TARGET)/bin/$$base ; \
	done 

deploy-perl-scripts-pl:
	export KB_TOP=$(TARGET); \
	export KB_RUNTIME=$(DEPLOY_RUNTIME); \
	export KB_PERL_PATH=$(TARGET)/lib ; \
	for src in $(SRC_PERL) ; do \
		basefile=`basename $$src`; \
		base=$$basefile; \
		echo install $$src $$base ; \
		cp $$src $(TARGET)/plbin ; \
		$(WRAP_PERL_SCRIPT) "$(TARGET)/plbin/$$basefile" $(TARGET)/bin/$$base ; \
	done

deploy-python-scripts:
	export KB_TOP=$(TARGET); \
	export KB_RUNTIME=$(DEPLOY_RUNTIME); \
	export KB_PYTHON_PATH=$(TARGET)/lib ; \
	for src in $(SRC_PYTHON) ; do \
		basefile=`basename $$src`; \
		base=`basename $$src .py`; \
		echo install $$src $$base ; \
		cp $$src $(TARGET)/pybin ; \
		$(WRAP_PYTHON_SCRIPT) "$(TARGET)/pybin/$$basefile" $(TARGET)/bin/$$base ; \
	done 

deploy-python-scripts-py:
	export KB_TOP=$(TARGET); \
	export KB_RUNTIME=$(DEPLOY_RUNTIME); \
	export KB_PYTHON_PATH=$(TARGET)/lib ; \
	for src in $(SRC_PYTHON) ; do \
		basefile=`basename $$src`; \
		base=$$basefile; \
		echo install $$src $$base ; \
		cp $$src $(TARGET)/pybin ; \
		$(WRAP_PYTHON_SCRIPT) "$(TARGET)/pybin/$$basefile" $(TARGET)/bin/$$base ; \
	done

deploy-sh-scripts:
	export KB_TOP=$(TARGET); \
	export KB_RUNTIME=$(DEPLOY_RUNTIME); \
	export KB_SH_PATH=$(TARGET)/lib ; \
	for src in $(SRC_SH) ; do \
		basefile=`basename $$src`; \
		base=$$basefile .sh; \
		echo install $$src $$base ; \
		cp $$src $(TARGET)/shbin ; \
		$(WRAP_SH_SCRIPT) "$(TARGET)/pybin/$$basefile" $(TARGET)/bin/$$base ; \
	done

deploy-sh-scripts-sh:
        export KB_TOP=$(TARGET); \
        export KB_RUNTIME=$(DEPLOY_RUNTIME); \
        export KB_SH_PATH=$(TARGET)/lib ; \
        for src in $(SRC_SH) ; do \
                basefile=`basename $$src`; \
                base=$$basefile; \
                echo install $$src $$base ; \
                cp $$src $(TARGET)/shbin ; \
                $(WRAP_SH_SCRIPT) "$(TARGET)/shbin/$$basefile" $(TARGET)/bin/$$base ; \
        done

deploy-unknown-scripts:
	echo "unknown scripts; $(SRC_UNKNOWN)"
	export KB_TOP=$(TARGET) ; \
	export KB_RUNTIME=$(DEPLOY_RUNTIME) ; \
	export KB_PYTHON_PATH=$(TARGET)/lib ; \
	for src in $(SRC_UNKNOWN) ; do \
		type=`$(SCRIPT_TYPE) $$src` ; \
		echo "treating $$src as type $$type" ; \
		basefile=`basename $$src`; \
		base=$$basefile; \
		echo install $$src $$base ; \
		if [ "$$type" = "pl" ] ; then \
			cp $$src $(TARGET)/plbin ; \
			$(WRAP_PERL_SCRIPT) "$(TARGET)/plbin/$$basefile" $(TARGET)/bin/$$base ; \
		elif [ "$$type" = "py" ] ; then \
			cp $$src $(TARGET)/pybin ; \
			$(WRAP_PYTHON_SCRIPT) "$(TARGET)/pybin/$$basefile" $(TARGET)/bin/$$base ; \
		elif [ "$$type" = "sh" ] ; then \
			cp $$src $(TARGET)/shbin ; \
			$(WRAP_SH_SCRIPT) "$(TARGET)/shbin/$$basefile" $(TARGET)/bin/$$base ; \
		else  \
			echo "$$src is of unknown type: $$type" ; \
		fi \
	done

deploy-libs:
	rsync --exclude '*.bak*' -arv lib/. $(TARGET)/lib/.

deploy-cfg:
    $(PPATH) $(MK_CONFIG) -t $(TARGET)
#
# We depend on the toplevel user-env so that a re-bootstrap
# will cause the scripts to be rebuilt. This eliminates a class
# of non-obvious errors where the perl/python library path
# in the wrapped script don't have additional libraries that were
# added.
#
$(BIN_DIR)/%: scripts/%.pl $(TOP_DIR)/user-env.sh
	$(WRAP_PERL_SCRIPT) '$$KB_TOP/modules/$(CURRENT_DIR)/$<' $@

$(BIN_DIR)/%: scripts/%.py
	$(WRAP_PYTHON_SCRIPT) '$$KB_TOP/modules/$(CURRENT_DIR)/$<' $@

%.class: %.java
	 $(JAVAC) $(JAVAC_FLAGS) $<
